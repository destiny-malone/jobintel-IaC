name: Security Scanner

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  id-token: write
  actions: write
  checks: write
  issues: write
  pull-requests: write
  statuses: write

jobs:
  devsecops:
    name: Trivy Scans
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.ref_name }}
      GITHUB_ACTOR: ${{ github.actor }}
      DISPLAY_BRANCH: ${{ github.ref }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_CHANNEL: ${{ github.ref_name == 'main' && '#production-alerts' || '#dev-alerts' }}
      GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      TF_VAR_environment: ${{ github.ref_name == 'main' && 'production' || github.ref_name }}
      TF_VAR_region: ${{ secrets.AWS_REGION }}
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_iam_role_name: ${{ secrets.IAM_ROLE_NAME }}
      TF_VAR_iam_policy_name: ${{ secrets.IAM_POLICY_NAME }}
      TF_VAR_artifact_storage_bucket: ${{ secrets.ARTIFACT_STORAGE_BUCKET }}
      TF_LOG: ${{ secrets.TF_LOG }}
      TF_INPUT: false
      TF_CLI_ARGS: "-no-color"

    strategy:
      fail-fast: false
      matrix:
        scan: [trivy]
    
    steps:

        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Run GitHub Secret Scanning
          env:
            GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          run: gh secret list

        - name: Prepare logs directory
          run: mkdir -p logs
        
        - name: Install Trivy
          uses: aquasecurity/setup-trivy@v0.2.3
          with:
            version: v0.61.0
            cache: true

        - name: Verify Terraform directory before scan
          run: |
            if [ ! -d "terraform/" ]; then
            echo "Error: terraform/ directory not found!"
            exit 1
            fi

        - name: Run initial Trivy scan
          run: |
            trivy config --severity HIGH,CRITICAL --exit-code 1 --format json --output logs/trivy-output.json terraform/

        - name: Upload trivy report
          uses: actions/upload-artifact@v4.6.2
          with:
            name: trivy-report
            path: logs/trivy-output.json

        - name: Run additional security scan
          if: matrix.scan == 'trivy'
          run: python scripts/security_scan.py
 
        - name: Upload security report
          uses: actions/upload-artifact@v4.6.2
          with:
            name: security-report
            path: logs/trivy-output.txt

        - name: Notify on Slack (success)
          if: (success() && (github.event_name == 'push' || github.event_name == 'pull_request'))
          uses: slackapi/slack-github-action@v2.1.0
          with:
            payload: |
              {
                "text": "Security scan completed for `${{ github.repository }}` on branch  `${{ github.ref_name }}` by `${{ github.actor }}`.",
                "attachments": [
                  {
                    "title": "Security Report",
                    "text": "The security scan has been completed. Please review the report.",
                    "color": "#36a64f"
                  }
                ]
              }
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
            SLACK_CHANNEL: ${{ github.ref_name == 'main' && '#production-alerts' || '#dev-alerts' }}
            SLACK_USERNAME: "JobIntel Bot"
            SLACK_ICON_EMOJI: ":robot_face:"
        
        - name: Notify on Slack (failure)
          if: (failure() && (github.event_name == 'push' || github.event_name == 'pull_request'))
          uses: slackapi/slack-github-action@v2.1.0
          with:
            payload: |
              {
                "text": "Security scan failed for `${{ github.repository }}` on branch  `${{ github.ref_name }}` by `${{ github.actor }}`.",
                "attachments": [
                  {
                    "title": "Security Report",
                    "text": "The security scan has failed. Please check the logs for details.",
                    "color": "#ff0000"
                  }
                ]
              }
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
            SLACK_CHANNEL: ${{ github.ref_name == 'main' && '#production-alerts' || '#dev-alerts' }}
            SLACK_USERNAME: "JobIntel Bot"
            SLACK_ICON_EMOJI: ":robot_face:"
