name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.ref_name }}
      GITHUB_ACTOR: ${{ github.actor }}
      DISPLAY_BRANCH: ${{ github.ref }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_CHANNEL: ${{ github.ref_name == 'main' && '#production-alerts' || '#dev-alerts' }}
      TF_VAR_slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      TF_VAR_environment: ${{ github.ref_name == 'main' && 'production' || github.ref_name }}
      TF_VAR_region: ${{ secrets.AWS_REGION }}
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_LOG: ${{ secrets.TF_LOG }}
      TF_INPUT: false
      TF_CLI_ARGS: "-no-color"
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Terraform Security Scan
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          tfsec terraform/

      - name: Terraform Init
        run: terraform -chdir=terraform/ init
        
      - name: Terraform Plan
        run: terraform -chdir=terraform/ plan -out=tfplan

      - name: Terraform Apply (Only on Main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=terraform/ apply -auto-approve tfplan


      - name: Parse tfplan and Send to Slack
        run: |
          terraform show -json tfplan > tfplan.json
          python scripts/parse_tfplan.py --input logs/tfplan.json --output logs/plan_output.json

      - name: Comment Plan on Pull Request
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ github.event.pull_request.number }}
          header: "### Terraform Plan"
          message: |
            ```json
            ${{ steps.plan_output.outputs.plan }}
            ```

      - name: Set Slack Channel
        id: slack_channel
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "channel=#production-alerts" >> $GITHUB_ENV
          else 
            echo "channel=#${{ github.ref_name }}-alerts" >> $GITHUB_ENV
          fi

      - name: Slack Notification (Success)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && success() && (env.TF_VAR_environment == 'production' || env.TF_VAR_environment == 'prod')
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Terraform plan applied successfully in `${{ env.TF_VAR_environment }}` environment (branch: `${{ env.DISPLAY_BRANCH }}`)."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL }}

      - name: Slack Notification (Failure)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Terraform plan failed in `${{ env.TF_VAR_environment }}` environment (branch: `${{ env.DISPLAY_BRANCH }}`)."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL }}

      - name: Save Terraform Workflow Logs
        if: always()
        run: |
          echo "Saving Terraform plan in JSON format..."
          terraform show -json tfplan.binary > logs/tfplan.json
          echo "Terraform logs saved to logs/tfplan.json"
        env:
          TF_LOG: ${{ env.TF_LOG }}

      - name: Upload Full Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-workflow-logs
          path: |
            logs/tfplan.json