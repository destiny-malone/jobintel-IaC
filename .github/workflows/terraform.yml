name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.ref_name }}
      GITHUB_ACTOR: ${{ github.actor }}
      DISPLAY_BRANCH: ${{ github.ref }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_CHANNEL: ${{ github.ref_name == 'main' && '#production-alerts' || '#dev-alerts' }}
      GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      TF_VAR_slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      TF_VAR_environment: ${{ github.ref_name == 'main' && 'production' || github.ref_name }}
      TF_VAR_region: ${{ secrets.AWS_REGION }}
      TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_LOG: ${{ secrets.TF_LOG }}
      TF_INPUT: false
      TF_CLI_ARGS: "-no-color"
    permissions:
      id-token: write
      contents: read
    steps:
      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./


      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create logs directory
        run: mkdir -p logs
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.4

      - name: Terraform Security Scan
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          tfsec terraform/

      # - name: Terraform Init
      #   run: terraform -chdir=terraform/ init 

      - name: Terraform Init Reconfigure
        run: |
          terraform -chdir=terraform/ init --upgrade
          terraform -chdir=terraform/ init --reconfigure
          terraform -chdir=terraform/ init -migrate-state

      - name: Terraform Provider
        run: |
          echo "--- Validating Terraform Providers ---"
          # Run `terraform providers` and capture any failure
          terraform -chdirs=terraform/ providers > logs/providers.log 2>&1
          if grep -q "unavailable provider" logs/providers.log; then
              echo "ERROR: Some providers failed to initialize!"
              
              # Send Slack alert
              curl -X POST -H 'Content-type: application/json' --data '{"text":"Terraform provider validation failed!"}' ${{ env.SLACK_WEBHOOK_URL }}

              exit 1
          fi

          echo "âœ… All providers are available."
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL }}
          SLACK_USERNAME: "JobIntel Bot"
          SLACK_ICON_EMOJI: ":robot_face:"
        
      - name: Terraform Plan
        run: terraform -chdir=terraform/ plan -out=tfplan

      - name: Terraform Apply (Only on Main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=terraform/ apply -auto-approve tfplan

      # - name: Parse tfplan and Send to Slack
      #   run: |
      #     terraform -chdir=terraform/ show -json tfplan > logs/tfplan.json
      #     cat logs/tfplan.json
      #     python scripts/parse_tfplan.py --input logs/tfplan.json --output logs/plan_output.json

      - name: Parse tfplan and Send to Slack
        run: |
          echo "--- Running terraform show to generate JSON plan ---"
          # Run terraform show from the repository root (default working directory).
          # Explicitly provide the path to the tfplan file: 'terraform/tfplan'
          terraform show -json terraform/tfplan | tee logs/tfplan.json
          
          # Check if the file exists and has content
          if [ ! -s logs/tfplan.json ]; then
            echo "ERROR: logs/tfplan.json is empty or not created after terraform show!"
            exit 1
          fi
          
          echo "--- Content of logs/tfplan.json ---"
          cat logs/tfplan.json
          
          echo "--- Running Python script ---"
          # Ensure this Python script path is absolute for robustness
          python /home/runner/work/jobintel-IaC/jobintel-IaC/scripts/parse_tfplan.py \
            --input /home/runner/work/jobintel-IaC/jobintel-IaC/logs/tfplan.json \
            --output /home/runner/work/jobintel-IaC/jobintel-IaC/logs/plan_output.json

      - name: Comment Plan on Pull Request
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2.9.2
        with:
          number: ${{ github.event.pull_request.number }}
          header: "### Terraform Plan"
          message: |
            ```json
            ${{ steps.plan_output.outputs.plan }}
            ```

      - name: Set Slack Channel
        id: slack_channel
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "channel=#production-alerts" >> ${{ env.TF_VAR_environment }}
          else 
            echo "channel=#${{ github.ref_name }}-alerts" >> ${{ env.TF_VAR_environment }}
          fi

      - name: Slack Notification (Success)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && success() && (env.TF_VAR_environment == 'production' || env.TF_VAR_environment == 'prod')
        uses: slackapi/slack-github-action@v2.1.0
        with:
          payload: |
            {
              "text": "Terraform plan applied successfully in `${{ env.TF_VAR_environment }}` environment (branch: `${{ env.DISPLAY_BRANCH }}`)."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL }}
          SLACK_USERNAME: "JobIntel Bot"
          SLACK_ICON_EMOJI: ":robot_face:"

      - name: Slack Notification (Failure)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && failure()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          payload: |
            {
              "text": "Terraform plan failed in `${{ env.TF_VAR_environment }}` environment (branch: `${{ env.DISPLAY_BRANCH }}`)."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL }}
          SLACK_USERNAME: "JobIntel Bot"
          SLACK_ICON_EMOJI: ":robot_face:"


      - name: Save Terraform Workflow Logs
        if: always()
        run: |
          echo "Saving Terraform plan in JSON format..."
          terraform show -json tfplan.binary > logs/tfplan.json
          echo "Terraform logs saved to logs/tfplan.json"
        env:
          TF_LOG: ${{ env.TF_LOG }}

      - name: Upload Full Logs
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: terraform-workflow-logs
          path: |
            logs/tfplan.json